import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';

// Initial state for the todos slice
const initialState = {
  todos: [],
  status: 'idle', // Can be 'idle', 'loading', 'succeeded', or 'failed'
  error: null,    // Error message in case of a failure
};

// Thunk for fetching todos from the API
export const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {
  const response = await axios.get('https://dummyjson.com/todos');
  return response.data.todos; // Return the todos array from the response
});

// Creating the todos slice
const todosSlice = createSlice({
  name: 'todos',
  initialState,
  reducers: {
    // Reducer for adding a new todo
    addTodo: (state, action) => {
      state.todos.push(action.payload);
    },
    // Reducer for updating an existing todo
    updateTodo: (state, action) => {
      const { id, todo } = action.payload;
      const existingTodo = state.todos.find((t) => t.id === id);
      if (existingTodo) {
        existingTodo.todo = todo;
      }
    },
    // Reducer for deleting a todo
    deleteTodo: (state, action) => {
      state.todos = state.todos.filter((todo) => todo.id !== action.payload);
    },
  },
  // Handling additional actions for async thunks
  extraReducers: (builder) => {
    builder
      // Handle the pending state of the fetchTodos thunk
      .addCase(fetchTodos.pending, (state) => {
        state.status = 'loading';
      })
      // Handle the fulfilled state of the fetchTodos thunk
      .addCase(fetchTodos.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.todos = action.payload; // Set the todos state to the fetched todos
      })
      // Handle the rejected state of the fetchTodos thunk
      .addCase(fetchTodos.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message; // Set the error message
      });
  },
});

// Export the action creators generated by createSlice
export const { addTodo, updateTodo, deleteTodo } = todosSlice.actions;

// Export the reducer to be used in the store
export default todosSlice.reducer;
